/*
一个简化版vec宏，能够接受不同类型和不同数量的参数，但是函数不行
 */
#[macro_export] // 表示该宏可以被引入，缺少该宏的话，就无法被import和使用
macro_rules! my_vec { // macro_rules!开始宏的定义，后面接宏的名字，这里是vec，花括号内是宏的body
    /*
    body类似match表达式，这里只有唯一分支需要匹配，
    1.最外层的()包住整个pattern
    2.$()，捕获小括号内满足pattern的值，这些值后续将在替换代码时候被用到
    3.$x:expr,表示匹配所有Rust表达式，并赋值给$x
    4.后续的逗号，表示满足表达式之后可能会出现的逗号
    5.*表示前面的pattern匹配的次数为0或者0次以上，类似正则表达式
    e.g vec![1,2,3]，$x将匹配1,2,3这3个表达式3次
     */
    ( $( $x:expr ),* ) => {
        {
            let mut temp_vec = Vec::new();
            $(
                temp_vec.push($x);
            )* // $(...)*，表示执行所匹配次数小括号内的代码
            temp_vec
        }
    };
}